// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Game {
    id    String  @id @unique @default(cuid())
    name  String // Dragon Ball FighterZ
    tag   String // DBFZ
    Input Input[]
}

model Character {
    id        String @id @unique @default(cuid())
    name      String
    tag       String
    iconUrl   String
    renderUrl String
    Combo     Combo?
}

// [['dpadNeutral', 'lightAttack', 'lightAttack', 'lightAttack'], ...[Notation]]]
model Combo {
    id         String     @id @unique @default(cuid())
    createdAt  DateTime   @default(now())
    notations  Notation[]
    damage     Int?
    meterGain  Decimal?   @db.Decimal(10, 1)
    worksOn    String?
    difficulty String?
    notes      String?    @db.VarChar(255)

    character   Character @relation(fields: [characterId], references: [id])
    characterId String

    @@unique([characterId])
    @@index([characterId])
}

// ['5', 'L', 'L', 'L']
model Notation {
    id     String  @id @unique @default(cuid())
    inputs Input[]

    combo   Combo  @relation(fields: [comboId], references: [id])
    comboId String

    @@unique([comboId])
    @@index([comboId])
}

model Input {
    id    String @id @unique @default(cuid())
    name  String // e.g. 'lightAttack' or 'dpadDown'
    input String // e.g. 'L' or  '2'

    Game   Game?   @relation(fields: [gameId], references: [id])
    gameId String?

    Notation   Notation? @relation(fields: [notationId], references: [id])
    notationId String?
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
